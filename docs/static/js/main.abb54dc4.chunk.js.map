{"version":3,"sources":["Firebase/firebase.js","components/SelectMenu.js","components/ButtonsTakeOrder.js","components/Customer.js","components/SendOrder.js","components/Meseros.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","SelectMenu","menu","onClick","map","item","index","className","key","name","Nombre","price","Precio","ButtonsTakeOrder","orderTaked","data","useState","order","state","setState","type","kind","allItems","menuSelectedItems","filter","Tipo","selectMenu","Customer","getName","onSubmit","e","preventDefault","id","placeholder","value","onChange","target","SendOrder","customerName","total","color","style","fontSize","length","Meseros","setItem","setCustomerName","setOrder","setTotal","getItems","a","collection","onSnapshot","querySnapshot","docs","forEach","doc","push","useEffect","console","log","inputName","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.abb54dc4.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyA6Wk2x0N6SjHVjmheIFcKRHuwwLnXfjwE\",\r\n  authDomain: \"burger-queen-react-3732b.firebaseapp.com\",\r\n  databaseURL: \"https://burger-queen-react-3732b.firebaseio.com\",\r\n  projectId: \"burger-queen-react-3732b\",\r\n  storageBucket: \"burger-queen-react-3732b.appspot.com\",\r\n  messagingSenderId: \"464585550874\",\r\n  appId: \"1:464585550874:web:5f64e8b9922d05865535a3\"\r\n};\r\n// Initialize Firebase\r\nconst fb = firebase.initializeApp(firebaseConfig);\r\nexport const db = fb.firestore();","import React from 'react';\r\n\r\nconst SelectMenu = ({ menu, onClick }) => {\r\n  \r\n  if (menu === null) {\r\n    return (\r\n      <div>\r\n        <p>Elige un men√∫ para ver los items disponibles</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      {\r\n        menu.map((item, index) => (\r\n        <button \r\n            className= \"ItemMenu_button\"\r\n            key= { index }\r\n            name= { item.Nombre }\r\n            price= { item.Precio }\r\n            onClick={ () => onClick(item.Nombre, item.Precio)}\r\n          >           \r\n            {item.Nombre} <br/>$ {item.Precio}\r\n          </button>\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SelectMenu","import React, { useState } from 'react';\r\nimport SelectMenu from './SelectMenu';\r\n\r\n\r\nconst ButtonsTakeOrder = ({ orderTaked, data }) => {\r\n  \r\n  const [state, setState] = useState({\r\n    menu: null,\r\n    order: []\r\n  });\r\n\r\n  const handleOnClickMenu = (Nombre, Precio) => {\r\n    orderTaked(Nombre, Precio);\r\n  };\r\n\r\n  const selectMenu = (kind, allItems) => {    \r\n    const menuSelectedItems = allItems.filter(item => {    \r\n      return item.Tipo === kind;\r\n    });\r\n    setState({ menu: menuSelectedItems })    \r\n  }; \r\n\r\n  const typesOfMenu = ['Desayuno', 'Almuerzo']\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {\r\n          typesOfMenu.map((type, index) => (\r\n            <button\r\n              className= \"Type_button\"              \r\n              onClick= { () => selectMenu(type, data) }\r\n              key= { index }\r\n            >\r\n              { type }\r\n            </button>\r\n          ))\r\n        }\r\n      </div>\r\n      <SelectMenu\r\n        menu= {state.menu}\r\n        onClick= { handleOnClickMenu }\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ButtonsTakeOrder","import React from 'react';\r\n\r\nconst Customer = ({ name, getName }) => {  \r\n\r\n  const handleInputChange = (e) => {\r\n    getName(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <label className=\"Text_weight\">Pedido</label>\r\n      <input \r\n        className=\"Order_input\"\r\n        id= 'filled-basic'\r\n        placeholder= 'Mesa/Cliente'       \r\n        type=\"text\"\r\n        value={ name }\r\n        onChange= { handleInputChange }      \r\n      />\r\n    </form>    \r\n  )\r\n}\r\n\r\nexport default Customer","import React from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst SendOrder = ({ customerName, order, total }) => {\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <p className=\"Text_weight\">Cliente: { customerName }</p>\r\n      </div>\r\n      <div>\r\n        {\r\n          order.map((item, index) => {\r\n            return (\r\n            <div className=\"Delete_item\">\r\n              <p key={ index }>{ item.Nombre + \" - $\" + item.Precio }</p>\r\n              <DeleteIcon\r\n                color=\"action\"\r\n                style={{ fontSize: 40 }}\r\n              />\r\n            </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n      <div>\r\n      <p className=\"Text_weight\">Items: { order.length } Total: { total }</p>\r\n      </div>\r\n      <div className=\"Order_buttons\">\r\n        <button>\r\n          Enviar\r\n        </button>\r\n        <button>\r\n          Cancelar orden\r\n        </button>\r\n        <button>\r\n          Observaciones\r\n        </button>      \r\n      </div>\r\n    </>\r\n  )  \r\n}\r\n\r\nexport default SendOrder","import React, { useState, useEffect } from 'react';\r\nimport { db } from '../Firebase/firebase'\r\nimport ButtonsTakeOrder from './ButtonsTakeOrder';\r\nimport Customer from './Customer';\r\nimport SendOrder from './SendOrder';\r\n\r\nexport const Meseros = () => {\r\n\r\n  const [item, setItem] = useState([]);\r\n  const [customerName, setCustomerName] = useState('');\r\n  const [order, setOrder] = useState([]);\r\n  const [total, setTotal] = useState(0);  \r\n\r\n  const getItems = async () => {\r\n    db.collection('menu').onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {       \r\n        docs.push({ ...doc.data(), id:doc.id })       \r\n      });\r\n      setItem(docs)      \r\n    });\r\n  } \r\n\r\n  useEffect(() => {\r\n    getItems();\r\n  }, [])\r\n\r\n  const getNameCustomer = (inputName) => {\r\n    setCustomerName(inputName);\r\n  };\r\n\r\n  const fromTakeOrderButtons = (Nombre, Precio) => {\r\n    setOrder([...order, { Nombre: Nombre, Precio: Precio }]);\r\n    const newTotal = total + Precio;\r\n    setTotal(newTotal);   \r\n  }\r\n  console.log(total, order) \r\n\r\n  return(\r\n    <section className=\"Waiters\">    \r\n      <div className=\"Waiters_menu\">\r\n        <Customer\r\n          getName = { getNameCustomer }\r\n          name = { customerName }\r\n        />        \r\n        <ButtonsTakeOrder\r\n          data={ item }\r\n          orderTaked= { fromTakeOrderButtons }\r\n        />\r\n      </div>\r\n      <div className=\"Waiters_order\">\r\n        <SendOrder\r\n          customerName= { customerName }\r\n          order= { order }\r\n          total= { total }\r\n        />\r\n      </div>\r\n    </section>\r\n  )\r\n}","import React from 'react';\nimport { Meseros } from './components/Meseros';\n\nfunction App() {\n  return (\n    <>\n      <Meseros />\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}